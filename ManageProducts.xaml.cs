using PRN221_SE1729_Group11_Project.Models;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PRN221_SE1729_Group11_Project
{
    /// <summary>
    /// Interaction logic for ManageProducts.xaml
    /// </summary>
    public partial class ManageProducts : Page
    {
        string searchField = "Name";
        string sortField = "Name";
        string sortOrder = "Ascending";

        private ObservableCollection<Product> Products;
        private PRN_PROJECTContext _context;


        public ManageProducts()
        {
            InitializeComponent();
            _context = new PRN_PROJECTContext();
            Products = new ObservableCollection<Product>();
            lvProducts.ItemsSource = Products;

            // Load initial data
            LoadProducts();
        }

        private void LoadProducts()
        {
            Products.Clear();
            var productsFromDb = _context.Products.ToList();
            foreach (var product in productsFromDb)
            {
                Products.Add(product);
            }
        }

        private void btnAdd_Click(object sender, RoutedEventArgs e)
        {
            if (ValidateInputs())
            {
                var newProduct = new Product
                {
                    // PID is auto-generated by the database
                    ProductName = txtProductName.Text,
                    Price = double.TryParse(txtPrice.Text, out double price) ? price : (double?)null,
                    RentPrice = double.TryParse(txtRentPrice.Text, out double rentPrice) ? rentPrice : (double?)null,
                    RentedTime = int.TryParse(txtRentedTime.Text, out int rentedTime) ? rentedTime : (int?)null,
                    Relate = txtRelate.Text
                };

                _context.Products.Add(newProduct);
                _context.SaveChanges();
                Products.Add(newProduct);
            }
        }

        private void btnEdit_Click(object sender, RoutedEventArgs e)
        {
            if (lvProducts.SelectedItem is Product selectedProduct)
            {
                if (ValidateInputs())
                {
                    selectedProduct.ProductName = txtProductName.Text;
                    selectedProduct.Price = double.TryParse(txtPrice.Text, out double price) ? price : (double?)null;
                    selectedProduct.RentPrice = double.TryParse(txtRentPrice.Text, out double rentPrice) ? rentPrice : (double?)null;
                    selectedProduct.RentedTime = int.TryParse(txtRentedTime.Text, out int rentedTime) ? rentedTime : (int?)null;
                    selectedProduct.Relate = txtRelate.Text;

                    _context.Products.Update(selectedProduct);
                    _context.SaveChanges();
                    lvProducts.Items.Refresh();
                }
            }
        }

        private void btnDelete_Click(object sender, RoutedEventArgs e)
        {
            if (lvProducts.SelectedItem is Product selectedProduct)
            {
                _context.Products.Remove(selectedProduct);
                _context.SaveChanges();
                Products.Remove(selectedProduct);
                ClearInputs();
            }
        }

        private void btnRefresh_Click(object sender, RoutedEventArgs e)
        {
            ClearInputs();
        }

        private void lvProducts_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (lvProducts.SelectedItem is Product selectedProduct)
            {
                txtProductName.Text = selectedProduct.ProductName;
                txtPrice.Text = selectedProduct.Price?.ToString();
                txtRentPrice.Text = selectedProduct.RentPrice?.ToString();
                txtRentedTime.Text = selectedProduct.RentedTime?.ToString();
                txtRelate.Text = selectedProduct.Relate;
            }
        }

        private void ClearInputs()
        {
            txtProductName.Clear();
            txtPrice.Clear();
            txtRentPrice.Clear();
            txtRentedTime.Clear();
            txtRelate.Clear();
        }

        private bool ValidateInputs()
        {
            if (string.IsNullOrWhiteSpace(txtProductName.Text))
            {
                MessageBox.Show("Product Name cannot be empty.");
                return false;
            }
            if (!double.TryParse(txtPrice.Text, out _))
            {
                MessageBox.Show("Invalid Price. Please enter a valid number.");
                return false;
            }
            if (!double.TryParse(txtRentPrice.Text, out _))
            {
                MessageBox.Show("Invalid Rent Price. Please enter a valid number.");
                return false;
            }
            if (!int.TryParse(txtRentedTime.Text, out _))
            {
                MessageBox.Show("Invalid Rented Time. Please enter a valid integer.");
                return false;
            }
            if (string.IsNullOrWhiteSpace(txtRelate.Text))
            {
                MessageBox.Show("Relate cannot be empty.");
                return false;
            }
            return true;
        }

        private void txtSearch_TextChanged(object sender, TextChangedEventArgs e)
        {
            FilterAndSortProducts();
        }
        private void cbSortBy_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            FilterAndSortProducts();
        }
        private void rbAscending_Checked(object sender, RoutedEventArgs e)
        {
            FilterAndSortProducts();
        }

        private void rbDescending_Checked(object sender, RoutedEventArgs e)
        {
            FilterAndSortProducts();
        }

        private void FilterAndSortProducts()
        {
            if (_context == null) return;

            try
            {
                var query = _context.Products.AsQueryable();

                // Filter
                var searchText = txtSearch.Text;
                var searchField = (cbSearchField.SelectedItem as ComboBoxItem)?.Content.ToString();
                if (!string.IsNullOrEmpty(searchText) && !string.IsNullOrEmpty(searchField))
                {
                    switch (searchField)
                    {
                        case "Name":
                            query = query.Where(p => p.ProductName.Contains(searchText));
                            break;
                        case "Price":
                            if (double.TryParse(searchText, out double price))
                                query = query.Where(p => p.Price == price);
                            break;
                        case "Rent Price":
                            if (double.TryParse(searchText, out double rentPrice))
                                query = query.Where(p => p.RentPrice == rentPrice);
                            break;
                        case "Relate":
                            query = query.Where(p => p.Relate.Contains(searchText));
                            break;
                    }
                }

                // Sort
                var sortField = (cbSortBy.SelectedItem as ComboBoxItem)?.Content.ToString();
                bool ascending = rbAscending.IsChecked == true;

                if (!string.IsNullOrEmpty(sortField))
                {
                    switch (sortField)
                    {
                        case "Name":
                            query = ascending ? query.OrderBy(p => p.ProductName) : query.OrderByDescending(p => p.ProductName);
                            break;
                        case "Price":
                            query = ascending ? query.OrderBy(p => p.Price) : query.OrderByDescending(p => p.Price);
                            break;
                        case "Rent Price":
                            query = ascending ? query.OrderBy(p => p.RentPrice) : query.OrderByDescending(p => p.RentPrice);
                            break;
                        case "Relate":
                            query = ascending ? query.OrderBy(p => p.Relate) : query.OrderByDescending(p => p.Relate);
                            break;
                        case "ID":
                            query = ascending ? query.OrderBy(p => p.Pid) : query.OrderByDescending(p => p.Pid);
                            break;
                    }
                }

                // Load sorted and filtered data
                Products.Clear();
                foreach (var product in query.ToList())
                {
                    Products.Add(product);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Failed to filter and sort products: " + ex.Message);
            }
        }

        private void btnBooking1_Click(object sender, RoutedEventArgs e)
        {
            NavigationService.Navigate(new ManageBooking());
        }

        private void btnCustomer_Click(object sender, RoutedEventArgs e)
        {
            NavigationService.Navigate(new ManageCustomer());
        }
    }


}