using Microsoft.Win32;
using OfficeOpenXml;
using PRN221_SE1729_Group11_Project.Models;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PRN221_SE1729_Group11_Project
{
    /// <summary>
    /// Interaction logic for ManageProducts.xaml
    /// </summary>
    public partial class ManageProducts : Page
    {
        string searchField = "Name";
        string sortField = "Name";
        string sortOrder = "Ascending";

        private ObservableCollection<Product> Products;
        private PRN_PROJECTContext _context;


        public ManageProducts()
        {
            InitializeComponent();
            _context = new PRN_PROJECTContext();
            Products = new ObservableCollection<Product>();
            lvProducts.ItemsSource = Products;

            // Load initial data
            LoadProducts();
        }

        private void LoadProducts()
        {
            Products.Clear();
            var productsFromDb = _context.Products.ToList();
            foreach (var product in productsFromDb)
            {
                Products.Add(product);
            }
        }

        private void btnAdd_Click(object sender, RoutedEventArgs e)
        {
            if (ValidateInputs())
            {
                var newProduct = new Product
                {
                    // PID is auto-generated by the database
                    ProductName = txtProductName.Text,
                    Price = double.TryParse(txtPrice.Text, out double price) ? price : (double?)null,
                    RentPrice = double.TryParse(txtRentPrice.Text, out double rentPrice) ? rentPrice : (double?)null,
                    RentedTime = int.TryParse(txtRentedTime.Text, out int rentedTime) ? rentedTime : (int?)null,
                    Relate = txtRelate.Text
                };

                _context.Products.Add(newProduct);
                _context.SaveChanges();
                Products.Add(newProduct);
            }
        }

        private void btnEdit_Click(object sender, RoutedEventArgs e)
        {
            if (lvProducts.SelectedItem is Product selectedProduct)
            {
                if (ValidateInputs())
                {
                    selectedProduct.ProductName = txtProductName.Text;
                    selectedProduct.Price = double.TryParse(txtPrice.Text, out double price) ? price : (double?)null;
                    selectedProduct.RentPrice = double.TryParse(txtRentPrice.Text, out double rentPrice) ? rentPrice : (double?)null;
                    selectedProduct.RentedTime = int.TryParse(txtRentedTime.Text, out int rentedTime) ? rentedTime : (int?)null;
                    selectedProduct.Relate = txtRelate.Text;

                    _context.Products.Update(selectedProduct);
                    _context.SaveChanges();
                    lvProducts.Items.Refresh();
                }
            }
        }

        private void btnDelete_Click(object sender, RoutedEventArgs e)
        {
            if (_context == null) return;

            if (lvProducts.SelectedItem is Product selectedProduct)
            {
                MessageBoxResult result = MessageBox.Show("Are you sure you want to delete this product? \n All of this product booking will also be delete", "Delete Confirmation", MessageBoxButton.YesNo);
                if (result == MessageBoxResult.Yes)
                {
                    try
                    {
                        // Delete associated bookings
                        var associatedBookings = _context.Bookings.Where(b => b.Pid == selectedProduct.Pid).ToList();
                        _context.Bookings.RemoveRange(associatedBookings);

                        // Delete the product
                        _context.Products.Remove(selectedProduct);
                        _context.SaveChanges();
                        Products.Remove(selectedProduct);
                        ClearInputs();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Failed to delete product: " + ex.Message);
                    }
                }
            }
        }

        private void btnRefresh_Click(object sender, RoutedEventArgs e)
        {
            ClearInputs();
        }

        private void lvProducts_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (lvProducts.SelectedItem is Product selectedProduct)
            {
                txtProductName.Text = selectedProduct.ProductName;
                txtPrice.Text = selectedProduct.Price?.ToString();
                txtRentPrice.Text = selectedProduct.RentPrice?.ToString();
                txtRentedTime.Text = selectedProduct.RentedTime?.ToString();
                txtRelate.Text = selectedProduct.Relate;
            }
        }

        private void ClearInputs()
        {
            txtProductName.Clear();
            txtPrice.Clear();
            txtRentPrice.Clear();
            txtRentedTime.Text = "0";
            txtRelate.Clear();
        }

        private bool ValidateInputs()
        {
            if (string.IsNullOrWhiteSpace(txtProductName.Text))
            {
                MessageBox.Show("Product Name cannot be empty.");
                return false;
            }
            if (!double.TryParse(txtPrice.Text, out _))
            {
                MessageBox.Show("Invalid Price. Please enter a valid number.");
                return false;
            }
            if (!double.TryParse(txtRentPrice.Text, out _))
            {
                MessageBox.Show("Invalid Rent Price. Please enter a valid number.");
                return false;
            }
            if (!int.TryParse(txtRentedTime.Text, out _))
            {
                MessageBox.Show("Invalid Rented Time. Please enter a valid integer.");
                return false;
            }
            if (string.IsNullOrWhiteSpace(txtRelate.Text))
            {
                MessageBox.Show("Relate cannot be empty.");
                return false;
            }
            return true;
        }

        private void txtSearch_TextChanged(object sender, TextChangedEventArgs e)
        {
            FilterAndSortProducts();
        }
        private void cbSortBy_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            FilterAndSortProducts();
        }
        private void rbAscending_Checked(object sender, RoutedEventArgs e)
        {
            FilterAndSortProducts();
        }

        private void rbDescending_Checked(object sender, RoutedEventArgs e)
        {
            FilterAndSortProducts();
        }

        private void FilterAndSortProducts()
        {
            if (_context == null) return;

            try
            {
                var query = _context.Products.AsQueryable();

                // Filter
                var searchText = txtSearch.Text;
                var searchField = (cbSearchField.SelectedItem as ComboBoxItem)?.Content.ToString();
                if (!string.IsNullOrEmpty(searchText) && !string.IsNullOrEmpty(searchField))
                {
                    switch (searchField)
                    {
                        case "Name":
                            query = query.Where(p => p.ProductName.Contains(searchText));
                            break;
                        case "Price":
                            if (double.TryParse(searchText, out double price))
                                query = query.Where(p => p.Price == price);
                            break;
                        case "Rent Price":
                            if (double.TryParse(searchText, out double rentPrice))
                                query = query.Where(p => p.RentPrice == rentPrice);
                            break;
                        case "Relate":
                            query = query.Where(p => p.Relate.Contains(searchText));
                            break;
                    }
                }

                // Sort
                var sortField = (cbSortBy.SelectedItem as ComboBoxItem)?.Content.ToString();
                bool ascending = rbAscending.IsChecked == true;

                if (!string.IsNullOrEmpty(sortField))
                {
                    switch (sortField)
                    {
                        case "Name":
                            query = ascending ? query.OrderBy(p => p.ProductName) : query.OrderByDescending(p => p.ProductName);
                            break;
                        case "Price":
                            query = ascending ? query.OrderBy(p => p.Price) : query.OrderByDescending(p => p.Price);
                            break;
                        case "Rent Price":
                            query = ascending ? query.OrderBy(p => p.RentPrice) : query.OrderByDescending(p => p.RentPrice);
                            break;
                        case "Relate":
                            query = ascending ? query.OrderBy(p => p.Relate) : query.OrderByDescending(p => p.Relate);
                            break;
                        case "ID":
                            query = ascending ? query.OrderBy(p => p.Pid) : query.OrderByDescending(p => p.Pid);
                            break;
                    }
                }

                // Load sorted and filtered data
                Products.Clear();
                foreach (var product in query.ToList())
                {
                    Products.Add(product);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Failed to filter and sort products: " + ex.Message);
            }
        }

        private void btnBooking1_Click(object sender, RoutedEventArgs e)
        {
            NavigationService.Navigate(new ManageBooking());
        }

        private void btnCustomer_Click(object sender, RoutedEventArgs e)
        {
            NavigationService.Navigate(new ManageCustomer());
        }

        private void btnExport_Click(object sender, RoutedEventArgs e)
        {
            var products = lvProducts.ItemsSource as IEnumerable<Product>;
            if (products == null || !products.Any())
            {
                MessageBox.Show("No data to export.", "Information", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            var saveFileDialog = new SaveFileDialog
            {
                Filter = "Excel files (*.xlsx)|*.xlsx",
                Title = "Save an Excel File"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

                using (var package = new ExcelPackage())
                {
                    var worksheet = package.Workbook.Worksheets.Add("Products");

                    worksheet.Cells[1, 1].Value = "PID";
                    worksheet.Cells[1, 2].Value = "ProductName";
                    worksheet.Cells[1, 3].Value = "Price";
                    worksheet.Cells[1, 4].Value = "RentPrice";
                    worksheet.Cells[1, 5].Value = "RentedTime";
                    worksheet.Cells[1, 6].Value = "Relate";

                    int row = 2;
                    foreach (var product in products)
                    {
                        worksheet.Cells[row, 1].Value = product.Pid;
                        worksheet.Cells[row, 2].Value = product.ProductName;
                        worksheet.Cells[row, 3].Value = product.Price;
                        worksheet.Cells[row, 4].Value = product.RentPrice;
                        worksheet.Cells[row, 5].Value = product.RentedTime;
                        worksheet.Cells[row, 6].Value = product.Relate;
                        row++;
                    }

                    var fileInfo = new FileInfo(saveFileDialog.FileName);
                    package.SaveAs(fileInfo);

                    MessageBox.Show("Data exported successfully.", "Information", MessageBoxButton.OK, MessageBoxImage.Information);
                }
            }
        }
    }


}